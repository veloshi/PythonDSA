https://leetcode.com/problems/last-stone-weight/ >> TBD
https://leetcode.com/problems/third-maximum-number/ >>> Done
class Solution:
    def thirdMax(self, nums: List[int]) -> int:
        min_heap = []
        taken = set()
        
        for index in range(len(nums)):
            # If current number was already taken, skip it.
            if nums[index] in taken:
                continue
            
            # If min heap already has three numbers in it.
            # Pop the smallest if current number is bigger than it.
            if len(min_heap) == 3:
                if min_heap[0] < nums[index]:
                    taken.remove(min_heap[0])
                    heappop(min_heap)
                    
                    heappush(min_heap, nums[index])
                    taken.add(nums[index])
                    
            # If min heap does not have three number we can push it.
            else:
                heappush(min_heap, nums[index])
                taken.add(nums[index])
        
        # 'nums' has only one distinct element it will be the maximum.
        if len(min_heap) == 1:
            return min_heap[0]
        
        # 'nums' has two distinct elements.
        elif len(min_heap) == 2:
            first_num = min_heap[0]
            heappop(min_heap)
            return max(first_num, min_heap[0])
        
        return min_heap[0]
https://leetcode.com/problems/kth-largest-element-in-a-stream/ >> done
https://leetcode.com/problems/k-closest-points-to-origin/ >> Doubt
https://leetcode.com/problems/sort-characters-by-frequency/
https://leetcode.com/problems/top-k-frequent-elements/ >> done
from collections import Counter
class Solution:
    def topKFrequent(self, nums: List[int], k: int) -> List[int]: 
        # O(1) time 
        if k == len(nums):
            return nums
        
        # 1. build hash map : character and how often it appears
        # O(N) time
        count = Counter(nums)   
        # 2-3. build heap of top k frequent elements and
        # convert it into an output array
        # O(N log k) time
        return heapq.nlargest(k, count.keys(), key=count.get) 
https://leetcode.com/problems/kth-largest-element-in-an-array/ >> Done
https://leetcode.com/problems/kth-smallest-element-in-a-sorted-matrix/
https://leetcode.com/problems/top-k-frequent-words/ >> done
https://leetcode.com/problems/find-k-pairs-with-smallest-sums/
https://leetcode.com/problems/merge-k-sorted-lists/
https://leetcode.com/problems/find-k-th-smallest-pair-distance/
https://leetcode.com/problems/find-median-from-data-stream/
https://leetcode.com/problems/find-the-kth-smallest-sum-of-a-matrix-with-sorted-rows/
https://leetcode.com/problems/car-pooling/
https://leetcode.com/problems/meeting-rooms/ >> done
https://leetcode.com/problems/meeting-rooms-ii/